<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Penjualan extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Penjualan_model');
    } 

    /*
     * Listing of penjualan
     */
    function index()
    {
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('penjualan/index?');
        $config['total_rows'] = $this->Penjualan_model->get_all_penjualan_count();
        $this->pagination->initialize($config);

        $data['penjualan'] = $this->Penjualan_model->get_all_penjualan($params);
        
        $data['_view'] = 'penjualan/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new penjualan
     */
    function add()
    {   
        $this->load->library('form_validation');

		$this->form_validation->set_rules('penjualan_nota','Penjualan Nota','required');
		$this->form_validation->set_rules('penjualan_tgl','Penjualan Tgl','required');
		$this->form_validation->set_rules('penjualan_kasir_id','Penjualan Kasir Id','required');
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'penjualan_kasir_id' => $this->input->post('penjualan_kasir_id'),
				'penjualan_nota' => $this->input->post('penjualan_nota'),
				'penjualan_tgl' => $this->input->post('penjualan_tgl'),
            );
            
            $penjualan_id = $this->Penjualan_model->add_penjualan($params);
            redirect('penjualan/index');
        }
        else
        {
			$this->load->model('Kasir_model');
			$data['all_kasir'] = $this->Kasir_model->get_all_kasir();
            
            $data['_view'] = 'penjualan/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a penjualan
     */
    function edit($penjualan_id)
    {   
        // check if the penjualan exists before trying to edit it
        $data['penjualan'] = $this->Penjualan_model->get_penjualan($penjualan_id);
        
        if(isset($data['penjualan']['penjualan_id']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('penjualan_nota','Penjualan Nota','required');
			$this->form_validation->set_rules('penjualan_tgl','Penjualan Tgl','required');
			$this->form_validation->set_rules('penjualan_kasir_id','Penjualan Kasir Id','required');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'penjualan_kasir_id' => $this->input->post('penjualan_kasir_id'),
					'penjualan_nota' => $this->input->post('penjualan_nota'),
					'penjualan_tgl' => $this->input->post('penjualan_tgl'),
                );

                $this->Penjualan_model->update_penjualan($penjualan_id,$params);            
                redirect('penjualan/index');
            }
            else
            {
				$this->load->model('Kasir_model');
				$data['all_kasir'] = $this->Kasir_model->get_all_kasir();

                $data['_view'] = 'penjualan/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The penjualan you are trying to edit does not exist.');
    } 

    /*
     * Deleting penjualan
     */
    function remove($penjualan_id)
    {
        $penjualan = $this->Penjualan_model->get_penjualan($penjualan_id);

        // check if the penjualan exists before trying to delete it
        if(isset($penjualan['penjualan_id']))
        {
            $this->Penjualan_model->delete_penjualan($penjualan_id);
            redirect('penjualan/index');
        }
        else
            show_error('The penjualan you are trying to delete does not exist.');
    }
    
}
